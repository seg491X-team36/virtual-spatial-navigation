// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.8.0
// source: vsn-schema/schema.proto

package schema

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BackendClient is the client API for Backend service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendClient interface {
	Counter(ctx context.Context, opts ...grpc.CallOption) (Backend_CounterClient, error)
}

type backendClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendClient(cc grpc.ClientConnInterface) BackendClient {
	return &backendClient{cc}
}

func (c *backendClient) Counter(ctx context.Context, opts ...grpc.CallOption) (Backend_CounterClient, error) {
	stream, err := c.cc.NewStream(ctx, &Backend_ServiceDesc.Streams[0], "/schema.Backend/Counter", opts...)
	if err != nil {
		return nil, err
	}
	x := &backendCounterClient{stream}
	return x, nil
}

type Backend_CounterClient interface {
	Send(*CounterRequest) error
	CloseAndRecv() (*CounterResponse, error)
	grpc.ClientStream
}

type backendCounterClient struct {
	grpc.ClientStream
}

func (x *backendCounterClient) Send(m *CounterRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *backendCounterClient) CloseAndRecv() (*CounterResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(CounterResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BackendServer is the server API for Backend service.
// All implementations must embed UnimplementedBackendServer
// for forward compatibility
type BackendServer interface {
	Counter(Backend_CounterServer) error
	mustEmbedUnimplementedBackendServer()
}

// UnimplementedBackendServer must be embedded to have forward compatible implementations.
type UnimplementedBackendServer struct {
}

func (UnimplementedBackendServer) Counter(Backend_CounterServer) error {
	return status.Errorf(codes.Unimplemented, "method Counter not implemented")
}
func (UnimplementedBackendServer) mustEmbedUnimplementedBackendServer() {}

// UnsafeBackendServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendServer will
// result in compilation errors.
type UnsafeBackendServer interface {
	mustEmbedUnimplementedBackendServer()
}

func RegisterBackendServer(s grpc.ServiceRegistrar, srv BackendServer) {
	s.RegisterService(&Backend_ServiceDesc, srv)
}

func _Backend_Counter_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BackendServer).Counter(&backendCounterServer{stream})
}

type Backend_CounterServer interface {
	SendAndClose(*CounterResponse) error
	Recv() (*CounterRequest, error)
	grpc.ServerStream
}

type backendCounterServer struct {
	grpc.ServerStream
}

func (x *backendCounterServer) SendAndClose(m *CounterResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *backendCounterServer) Recv() (*CounterRequest, error) {
	m := new(CounterRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Backend_ServiceDesc is the grpc.ServiceDesc for Backend service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Backend_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "schema.Backend",
	HandlerType: (*BackendServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Counter",
			Handler:       _Backend_Counter_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "vsn-schema/schema.proto",
}
