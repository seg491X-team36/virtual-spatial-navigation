// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0

package db

import (
	"database/sql/driver"
	"encoding/json"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type UserAccountState string

const (
	UserAccountStateREGISTERED UserAccountState = "REGISTERED"
	UserAccountStateREJECTED   UserAccountState = "REJECTED"
	UserAccountStateACCEPTED   UserAccountState = "ACCEPTED"
)

func (e *UserAccountState) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = UserAccountState(s)
	case string:
		*e = UserAccountState(s)
	default:
		return fmt.Errorf("unsupported scan type for UserAccountState: %T", src)
	}
	return nil
}

type NullUserAccountState struct {
	UserAccountState UserAccountState
	Valid            bool // Valid is true if UserAccountState is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullUserAccountState) Scan(value interface{}) error {
	if value == nil {
		ns.UserAccountState, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.UserAccountState.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullUserAccountState) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.UserAccountState, nil
}

type Experiment struct {
	ID          uuid.UUID
	Name        string
	Description string
	Config      json.RawMessage
}

type ExperimentResult struct {
	ID           uuid.UUID
	CreatedAt    time.Time
	UserID       uuid.UUID
	ExperimentID uuid.UUID
}

type Invite struct {
	ID           uuid.UUID
	CreatedAt    time.Time
	UserID       uuid.UUID
	ExperimentID uuid.UUID
}

type User struct {
	ID     uuid.UUID
	Email  string
	State  UserAccountState
	Source string
}
