// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: invite.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createInvite = `-- name: CreateInvite :one
INSERT INTO
    invites (
        user_id,
        experiment_id,
        supervised
    )
VALUES
    ($1, $2, $3)
RETURNING id, user_id, experiment_id, supervised
`

type CreateInviteParams struct {
	UserID       uuid.UUID
	ExperimentID uuid.UUID
	Supervised   bool
}

func (q *Queries) CreateInvite(ctx context.Context, arg CreateInviteParams) (Invite, error) {
	row := q.db.QueryRowContext(ctx, createInvite, arg.UserID, arg.ExperimentID, arg.Supervised)
	var i Invite
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExperimentID,
		&i.Supervised,
	)
	return i, err
}

const getInvite = `-- name: GetInvite :one
SELECT id, user_id, experiment_id, supervised
FROM invites
WHERE id = $1
LIMIT 1
`

func (q *Queries) GetInvite(ctx context.Context, id uuid.UUID) (Invite, error) {
	row := q.db.QueryRowContext(ctx, getInvite, id)
	var i Invite
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExperimentID,
		&i.Supervised,
	)
	return i, err
}

const getInvitesByExperimentId = `-- name: GetInvitesByExperimentId :many
SELECT id, user_id, experiment_id, supervised
FROM invites
WHERE supervised = $1
AND experiment_id = $2
`

type GetInvitesByExperimentIdParams struct {
	Supervised   bool
	ExperimentID uuid.UUID
}

func (q *Queries) GetInvitesByExperimentId(ctx context.Context, arg GetInvitesByExperimentIdParams) ([]Invite, error) {
	rows, err := q.db.QueryContext(ctx, getInvitesByExperimentId, arg.Supervised, arg.ExperimentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Invite
	for rows.Next() {
		var i Invite
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ExperimentID,
			&i.Supervised,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
