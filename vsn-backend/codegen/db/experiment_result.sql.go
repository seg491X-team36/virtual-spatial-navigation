// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: experiment_result.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createExperimentResult = `-- name: CreateExperimentResult :one
INSERT INTO
    experiment_results (
        id,
        user_id,
        experiment_id
    )
VALUES ($1, $2, $3)
RETURNING id, created_at, user_id, experiment_id
`

type CreateExperimentResultParams struct {
	ID           uuid.UUID
	UserID       uuid.UUID
	ExperimentID uuid.UUID
}

func (q *Queries) CreateExperimentResult(ctx context.Context, arg CreateExperimentResultParams) (ExperimentResult, error) {
	row := q.db.QueryRowContext(ctx, createExperimentResult, arg.ID, arg.UserID, arg.ExperimentID)
	var i ExperimentResult
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UserID,
		&i.ExperimentID,
	)
	return i, err
}

const getExperimentResultsByExperimentId = `-- name: GetExperimentResultsByExperimentId :many
SELECT id, created_at, user_id, experiment_id
FROM experiment_results
WHERE experiment_id = $1
`

func (q *Queries) GetExperimentResultsByExperimentId(ctx context.Context, experimentID uuid.UUID) ([]ExperimentResult, error) {
	rows, err := q.db.QueryContext(ctx, getExperimentResultsByExperimentId, experimentID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExperimentResult
	for rows.Next() {
		var i ExperimentResult
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.ExperimentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getExperimentResultsByUserId = `-- name: GetExperimentResultsByUserId :many
SELECT id, created_at, user_id, experiment_id
FROM experiment_results
WHERE user_id = $1
`

func (q *Queries) GetExperimentResultsByUserId(ctx context.Context, userID uuid.UUID) ([]ExperimentResult, error) {
	rows, err := q.db.QueryContext(ctx, getExperimentResultsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ExperimentResult
	for rows.Next() {
		var i ExperimentResult
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UserID,
			&i.ExperimentID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
